digraph ParseTree {
node [shape=plaintext];
  1 [label="program"];
  2 [label="statement"];
  3 [label="block_statement"];
  4 [label="block_declaration"];
  5 [label="function_definition"];
  6 [label="DEF"];
  5 -> 6;
  7 [label="data_type"];
  8 [label="void"];
  9 [label="void"];
  8 -> 9;
  7 -> 8;
  5 -> 7;
  10 [label="id"];
  11 [label="tower_of_hanoi"];
  10 -> 11;
  5 -> 10;
  12 [label="("];
  5 -> 12;
  13 [label="data_type"];
  14 [label="integer"];
  15 [label="int"];
  14 -> 15;
  13 -> 14;
  5 -> 13;
  16 [label="id"];
  17 [label="n"];
  16 -> 17;
  5 -> 16;
  18 [label=","];
  5 -> 18;
  19 [label="data_type"];
  20 [label="char"];
  21 [label="char"];
  20 -> 21;
  19 -> 20;
  5 -> 19;
  22 [label="id"];
  23 [label="from"];
  22 -> 23;
  5 -> 22;
  24 [label=","];
  5 -> 24;
  25 [label="data_type"];
  26 [label="char"];
  27 [label="char"];
  26 -> 27;
  25 -> 26;
  5 -> 25;
  28 [label="id"];
  29 [label="to"];
  28 -> 29;
  5 -> 28;
  30 [label=","];
  5 -> 30;
  31 [label="data_type"];
  32 [label="char"];
  33 [label="char"];
  32 -> 33;
  31 -> 32;
  5 -> 31;
  34 [label="id"];
  35 [label="aux"];
  34 -> 35;
  5 -> 34;
  36 [label=")"];
  5 -> 36;
  37 [label=":"];
  5 -> 37;
  38 [label="statement"];
  39 [label="block_statement"];
  40 [label="if_statement"];
  41 [label="IF"];
  40 -> 41;
  42 [label="logical_expression"];
  43 [label="logical_expression"];
  44 [label="single_expression"];
  45 [label="id"];
  46 [label="n"];
  45 -> 46;
  44 -> 45;
  43 -> 44;
  42 -> 43;
  47 [label="comparator"];
  48 [label="equal"];
  49 [label="=="];
  48 -> 49;
  47 -> 48;
  42 -> 47;
  50 [label="logical_expression"];
  51 [label="single_expression"];
  52 [label="constant"];
  53 [label="1"];
  52 -> 53;
  51 -> 52;
  50 -> 51;
  42 -> 50;
  40 -> 42;
  54 [label=":"];
  40 -> 54;
  55 [label="statement"];
  56 [label="single_statement"];
  57 [label="printing_statement"];
  58 [label="printf_statement"];
  59 [label="PRINTF"];
  58 -> 59;
  60 [label="("];
  58 -> 60;
  61 [label="\"Move disk 1 from rod {} to rod {}\\n\""];
  58 -> 61;
  62 [label=","];
  58 -> 62;
  63 [label="arguments"];
  64 [label="expression"];
  65 [label="single_expression"];
  66 [label="id"];
  67 [label="from"];
  66 -> 67;
  65 -> 66;
  64 -> 65;
  63 -> 64;
  68 [label=","];
  63 -> 68;
  69 [label="expression"];
  70 [label="single_expression"];
  71 [label="id"];
  72 [label="to"];
  71 -> 72;
  70 -> 71;
  69 -> 70;
  63 -> 69;
  58 -> 63;
  73 [label=")"];
  58 -> 73;
  57 -> 58;
  56 -> 57;
  55 -> 56;
  74 [label=";"];
  55 -> 74;
  40 -> 55;
  75 [label="statement"];
  76 [label="single_statement"];
  77 [label="return_statement"];
  78 [label="RETURN"];
  77 -> 78;
  76 -> 77;
  75 -> 76;
  79 [label=";"];
  75 -> 79;
  40 -> 75;
  39 -> 40;
  38 -> 39;
  80 [label="END"];
  38 -> 80;
  5 -> 38;
  81 [label="statement"];
  82 [label="single_statement"];
  83 [label="function_call"];
  84 [label="id"];
  85 [label="tower_of_hanoi"];
  84 -> 85;
  83 -> 84;
  86 [label="("];
  83 -> 86;
  87 [label="arguments"];
  88 [label="expression"];
  89 [label="arithmetic_expression"];
  90 [label="arithmetic_expression"];
  91 [label="single_expression"];
  92 [label="id"];
  93 [label="n"];
  92 -> 93;
  91 -> 92;
  90 -> 91;
  89 -> 90;
  94 [label="arith_operator"];
  95 [label="sub"];
  96 [label="-"];
  95 -> 96;
  94 -> 95;
  89 -> 94;
  97 [label="arithmetic_expression"];
  98 [label="single_expression"];
  99 [label="constant"];
  100 [label="1"];
  99 -> 100;
  98 -> 99;
  97 -> 98;
  89 -> 97;
  88 -> 89;
  87 -> 88;
  101 [label=","];
  87 -> 101;
  102 [label="expression"];
  103 [label="single_expression"];
  104 [label="id"];
  105 [label="from"];
  104 -> 105;
  103 -> 104;
  102 -> 103;
  87 -> 102;
  106 [label=","];
  87 -> 106;
  107 [label="expression"];
  108 [label="single_expression"];
  109 [label="id"];
  110 [label="aux"];
  109 -> 110;
  108 -> 109;
  107 -> 108;
  87 -> 107;
  111 [label=","];
  87 -> 111;
  112 [label="expression"];
  113 [label="single_expression"];
  114 [label="id"];
  115 [label="to"];
  114 -> 115;
  113 -> 114;
  112 -> 113;
  87 -> 112;
  83 -> 87;
  116 [label=")"];
  83 -> 116;
  82 -> 83;
  81 -> 82;
  117 [label=";"];
  81 -> 117;
  5 -> 81;
  118 [label="statement"];
  119 [label="single_statement"];
  120 [label="printing_statement"];
  121 [label="printf_statement"];
  122 [label="PRINTF"];
  121 -> 122;
  123 [label="("];
  121 -> 123;
  124 [label="\"Move disk {} from rod {} to rod {}\\n\""];
  121 -> 124;
  125 [label=","];
  121 -> 125;
  126 [label="arguments"];
  127 [label="expression"];
  128 [label="single_expression"];
  129 [label="id"];
  130 [label="n"];
  129 -> 130;
  128 -> 129;
  127 -> 128;
  126 -> 127;
  131 [label=","];
  126 -> 131;
  132 [label="expression"];
  133 [label="single_expression"];
  134 [label="id"];
  135 [label="from"];
  134 -> 135;
  133 -> 134;
  132 -> 133;
  126 -> 132;
  136 [label=","];
  126 -> 136;
  137 [label="expression"];
  138 [label="single_expression"];
  139 [label="id"];
  140 [label="to"];
  139 -> 140;
  138 -> 139;
  137 -> 138;
  126 -> 137;
  121 -> 126;
  141 [label=")"];
  121 -> 141;
  120 -> 121;
  119 -> 120;
  118 -> 119;
  142 [label=";"];
  118 -> 142;
  5 -> 118;
  143 [label="statement"];
  144 [label="single_statement"];
  145 [label="function_call"];
  146 [label="id"];
  147 [label="tower_of_hanoi"];
  146 -> 147;
  145 -> 146;
  148 [label="("];
  145 -> 148;
  149 [label="arguments"];
  150 [label="expression"];
  151 [label="arithmetic_expression"];
  152 [label="arithmetic_expression"];
  153 [label="single_expression"];
  154 [label="id"];
  155 [label="n"];
  154 -> 155;
  153 -> 154;
  152 -> 153;
  151 -> 152;
  156 [label="arith_operator"];
  157 [label="sub"];
  158 [label="-"];
  157 -> 158;
  156 -> 157;
  151 -> 156;
  159 [label="arithmetic_expression"];
  160 [label="single_expression"];
  161 [label="constant"];
  162 [label="1"];
  161 -> 162;
  160 -> 161;
  159 -> 160;
  151 -> 159;
  150 -> 151;
  149 -> 150;
  163 [label=","];
  149 -> 163;
  164 [label="expression"];
  165 [label="single_expression"];
  166 [label="id"];
  167 [label="aux"];
  166 -> 167;
  165 -> 166;
  164 -> 165;
  149 -> 164;
  168 [label=","];
  149 -> 168;
  169 [label="expression"];
  170 [label="single_expression"];
  171 [label="id"];
  172 [label="to"];
  171 -> 172;
  170 -> 171;
  169 -> 170;
  149 -> 169;
  173 [label=","];
  149 -> 173;
  174 [label="expression"];
  175 [label="single_expression"];
  176 [label="id"];
  177 [label="from"];
  176 -> 177;
  175 -> 176;
  174 -> 175;
  149 -> 174;
  145 -> 149;
  178 [label=")"];
  145 -> 178;
  144 -> 145;
  143 -> 144;
  179 [label=";"];
  143 -> 179;
  5 -> 143;
  4 -> 5;
  3 -> 4;
  2 -> 3;
  180 [label="END"];
  2 -> 180;
  1 -> 2;
  181 [label="statement"];
  182 [label="single_statement"];
  183 [label="single_declaration"];
  184 [label="variable_declaration"];
  185 [label="data_type"];
  186 [label="integer"];
  187 [label="int"];
  186 -> 187;
  185 -> 186;
  184 -> 185;
  188 [label="id"];
  189 [label="n"];
  188 -> 189;
  184 -> 188;
  190 [label="assign"];
  191 [label="="];
  190 -> 191;
  184 -> 190;
  192 [label="expression"];
  193 [label="single_expression"];
  194 [label="constant"];
  195 [label="3"];
  194 -> 195;
  193 -> 194;
  192 -> 193;
  184 -> 192;
  183 -> 184;
  182 -> 183;
  181 -> 182;
  196 [label=";"];
  181 -> 196;
  1 -> 181;
  197 [label="statement"];
  198 [label="single_statement"];
  199 [label="function_call"];
  200 [label="id"];
  201 [label="tower_of_hanoi"];
  200 -> 201;
  199 -> 200;
  202 [label="("];
  199 -> 202;
  203 [label="arguments"];
  204 [label="expression"];
  205 [label="single_expression"];
  206 [label="id"];
  207 [label="n"];
  206 -> 207;
  205 -> 206;
  204 -> 205;
  203 -> 204;
  208 [label=","];
  203 -> 208;
  209 [label="expression"];
  210 [label="single_expression"];
  211 [label="constant"];
  212 [label="char_literal"];
  213 [label="'"];
  212 -> 213;
  214 [label="A"];
  212 -> 214;
  215 [label="'"];
  212 -> 215;
  211 -> 212;
  210 -> 211;
  209 -> 210;
  203 -> 209;
  216 [label=","];
  203 -> 216;
  217 [label="expression"];
  218 [label="single_expression"];
  219 [label="constant"];
  220 [label="char_literal"];
  221 [label="'"];
  220 -> 221;
  222 [label="C"];
  220 -> 222;
  223 [label="'"];
  220 -> 223;
  219 -> 220;
  218 -> 219;
  217 -> 218;
  203 -> 217;
  224 [label=","];
  203 -> 224;
  225 [label="expression"];
  226 [label="single_expression"];
  227 [label="constant"];
  228 [label="char_literal"];
  229 [label="'"];
  228 -> 229;
  230 [label="B"];
  228 -> 230;
  231 [label="'"];
  228 -> 231;
  227 -> 228;
  226 -> 227;
  225 -> 226;
  203 -> 225;
  199 -> 203;
  232 [label=")"];
  199 -> 232;
  198 -> 199;
  197 -> 198;
  233 [label=";"];
  197 -> 233;
  1 -> 197;
  234 [label="<EOF>"];
  1 -> 234;
}
