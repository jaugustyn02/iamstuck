digraph ParseTree {
node [shape=plaintext];
  1 [label="program"];
  2 [label="statement"];
  3 [label="single_statement"];
  4 [label="single_declaration"];
  5 [label="variable_declaration"];
  6 [label="data_type"];
  7 [label="integer"];
  8 [label="int"];
  7 -> 8;
  6 -> 7;
  5 -> 6;
  9 [label="id"];
  10 [label="x"];
  9 -> 10;
  5 -> 9;
  11 [label="assign"];
  12 [label="="];
  11 -> 12;
  5 -> 11;
  13 [label="expression"];
  14 [label="single_expression"];
  15 [label="constant"];
  16 [label="2"];
  15 -> 16;
  14 -> 15;
  13 -> 14;
  5 -> 13;
  4 -> 5;
  3 -> 4;
  2 -> 3;
  17 [label=";"];
  2 -> 17;
  1 -> 2;
  18 [label="statement"];
  19 [label="single_statement"];
  20 [label="single_declaration"];
  21 [label="variable_declaration"];
  22 [label="data_type"];
  23 [label="string"];
  24 [label="string"];
  23 -> 24;
  22 -> 23;
  21 -> 22;
  25 [label="id"];
  26 [label="s"];
  25 -> 26;
  21 -> 25;
  27 [label="assign"];
  28 [label="="];
  27 -> 28;
  21 -> 27;
  29 [label="expression"];
  30 [label="single_expression"];
  31 [label="constant"];
  32 [label="\"ola\""];
  31 -> 32;
  30 -> 31;
  29 -> 30;
  21 -> 29;
  20 -> 21;
  19 -> 20;
  18 -> 19;
  33 [label=";"];
  18 -> 33;
  1 -> 18;
  34 [label="statement"];
  35 [label="single_statement"];
  36 [label="printing_statement"];
  37 [label="print_statement"];
  38 [label="PRINT"];
  37 -> 38;
  39 [label="("];
  37 -> 39;
  40 [label="arguments"];
  41 [label="expression"];
  42 [label="single_expression"];
  43 [label="constant"];
  44 [label="\"x = \""];
  43 -> 44;
  42 -> 43;
  41 -> 42;
  40 -> 41;
  45 [label=","];
  40 -> 45;
  46 [label="expression"];
  47 [label="single_expression"];
  48 [label="id"];
  49 [label="x"];
  48 -> 49;
  47 -> 48;
  46 -> 47;
  40 -> 46;
  50 [label=","];
  40 -> 50;
  51 [label="expression"];
  52 [label="single_expression"];
  53 [label="constant"];
  54 [label="\", s = \""];
  53 -> 54;
  52 -> 53;
  51 -> 52;
  40 -> 51;
  55 [label=","];
  40 -> 55;
  56 [label="expression"];
  57 [label="single_expression"];
  58 [label="id"];
  59 [label="s"];
  58 -> 59;
  57 -> 58;
  56 -> 57;
  40 -> 56;
  60 [label=","];
  40 -> 60;
  61 [label="expression"];
  62 [label="single_expression"];
  63 [label="constant"];
  64 [label="\"\\n\""];
  63 -> 64;
  62 -> 63;
  61 -> 62;
  40 -> 61;
  37 -> 40;
  65 [label=")"];
  37 -> 65;
  36 -> 37;
  35 -> 36;
  34 -> 35;
  66 [label=";"];
  34 -> 66;
  1 -> 34;
  67 [label="statement"];
  68 [label="single_statement"];
  69 [label="printing_statement"];
  70 [label="println_statement"];
  71 [label="PRINTLN"];
  70 -> 71;
  72 [label="("];
  70 -> 72;
  73 [label="arguments"];
  74 [label="expression"];
  75 [label="single_expression"];
  76 [label="constant"];
  77 [label="\"x = \""];
  76 -> 77;
  75 -> 76;
  74 -> 75;
  73 -> 74;
  78 [label=","];
  73 -> 78;
  79 [label="expression"];
  80 [label="single_expression"];
  81 [label="id"];
  82 [label="x"];
  81 -> 82;
  80 -> 81;
  79 -> 80;
  73 -> 79;
  83 [label=","];
  73 -> 83;
  84 [label="expression"];
  85 [label="single_expression"];
  86 [label="constant"];
  87 [label="\", s = \""];
  86 -> 87;
  85 -> 86;
  84 -> 85;
  73 -> 84;
  88 [label=","];
  73 -> 88;
  89 [label="expression"];
  90 [label="single_expression"];
  91 [label="id"];
  92 [label="s"];
  91 -> 92;
  90 -> 91;
  89 -> 90;
  73 -> 89;
  70 -> 73;
  93 [label=")"];
  70 -> 93;
  69 -> 70;
  68 -> 69;
  67 -> 68;
  94 [label=";"];
  67 -> 94;
  1 -> 67;
  95 [label="statement"];
  96 [label="single_statement"];
  97 [label="printing_statement"];
  98 [label="printf_statement"];
  99 [label="PRINTF"];
  98 -> 99;
  100 [label="("];
  98 -> 100;
  101 [label="\"x = {},  s = {} \\n\""];
  98 -> 101;
  102 [label=","];
  98 -> 102;
  103 [label="arguments"];
  104 [label="expression"];
  105 [label="single_expression"];
  106 [label="id"];
  107 [label="x"];
  106 -> 107;
  105 -> 106;
  104 -> 105;
  103 -> 104;
  108 [label=","];
  103 -> 108;
  109 [label="expression"];
  110 [label="single_expression"];
  111 [label="id"];
  112 [label="s"];
  111 -> 112;
  110 -> 111;
  109 -> 110;
  103 -> 109;
  98 -> 103;
  113 [label=")"];
  98 -> 113;
  97 -> 98;
  96 -> 97;
  95 -> 96;
  114 [label=";"];
  95 -> 114;
  1 -> 95;
  115 [label="<EOF>"];
  1 -> 115;
}
