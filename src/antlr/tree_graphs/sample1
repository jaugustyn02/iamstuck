digraph ParseTree {
node [shape=plaintext];
  1 [label="program"];
  2 [label="statement"];
  3 [label="block_statement"];
  4 [label="if_statement"];
  5 [label="IF"];
  4 -> 5;
  6 [label="logical_expression"];
  7 [label="single_expression"];
  8 [label="constant"];
  9 [label="bool_literal"];
  10 [label="true"];
  9 -> 10;
  8 -> 9;
  7 -> 8;
  6 -> 7;
  4 -> 6;
  11 [label=":"];
  4 -> 11;
  12 [label="statement"];
  13 [label="single_statement"];
  14 [label="pass_statement"];
  15 [label="PASS"];
  14 -> 15;
  13 -> 14;
  12 -> 13;
  16 [label=";"];
  12 -> 16;
  4 -> 12;
  3 -> 4;
  2 -> 3;
  17 [label="END"];
  2 -> 17;
  1 -> 2;
  18 [label="statement"];
  19 [label="single_statement"];
  20 [label="single_declaration"];
  21 [label="container_declaration"];
  22 [label="container_type"];
  23 [label="stack"];
  24 [label="STACK"];
  23 -> 24;
  22 -> 23;
  21 -> 22;
  25 [label="<"];
  21 -> 25;
  26 [label="data_type"];
  27 [label="integer"];
  28 [label="int"];
  27 -> 28;
  26 -> 27;
  21 -> 26;
  29 [label=">"];
  21 -> 29;
  30 [label="id"];
  31 [label="s1"];
  30 -> 31;
  21 -> 30;
  20 -> 21;
  19 -> 20;
  18 -> 19;
  32 [label=";"];
  18 -> 32;
  1 -> 18;
  33 [label="statement"];
  34 [label="single_statement"];
  35 [label="single_declaration"];
  36 [label="container_declaration"];
  37 [label="container_type"];
  38 [label="queue"];
  39 [label="QUEUE"];
  38 -> 39;
  37 -> 38;
  36 -> 37;
  40 [label="<"];
  36 -> 40;
  41 [label="data_type"];
  42 [label="float"];
  43 [label="float"];
  42 -> 43;
  41 -> 42;
  36 -> 41;
  44 [label=">"];
  36 -> 44;
  45 [label="id"];
  46 [label="q1"];
  45 -> 46;
  36 -> 45;
  35 -> 36;
  34 -> 35;
  33 -> 34;
  47 [label=";"];
  33 -> 47;
  1 -> 33;
  48 [label="statement"];
  49 [label="single_statement"];
  50 [label="single_declaration"];
  51 [label="container_declaration"];
  52 [label="container_type"];
  53 [label="deque"];
  54 [label="DEQUE"];
  53 -> 54;
  52 -> 53;
  51 -> 52;
  55 [label="<"];
  51 -> 55;
  56 [label="data_type"];
  57 [label="string"];
  58 [label="string"];
  57 -> 58;
  56 -> 57;
  51 -> 56;
  59 [label=">"];
  51 -> 59;
  60 [label="id"];
  61 [label="dq1"];
  60 -> 61;
  51 -> 60;
  50 -> 51;
  49 -> 50;
  48 -> 49;
  62 [label=";"];
  48 -> 62;
  1 -> 48;
  63 [label="statement"];
  64 [label="single_statement"];
  65 [label="single_declaration"];
  66 [label="variable_declaration"];
  67 [label="data_type"];
  68 [label="integer"];
  69 [label="int"];
  68 -> 69;
  67 -> 68;
  66 -> 67;
  70 [label="id"];
  71 [label="x"];
  70 -> 71;
  66 -> 70;
  72 [label="assign"];
  73 [label="="];
  72 -> 73;
  66 -> 72;
  74 [label="expression"];
  75 [label="single_expression"];
  76 [label="constant"];
  77 [label="10"];
  76 -> 77;
  75 -> 76;
  74 -> 75;
  66 -> 74;
  65 -> 66;
  64 -> 65;
  63 -> 64;
  78 [label=";"];
  63 -> 78;
  1 -> 63;
  79 [label="statement"];
  80 [label="block_statement"];
  81 [label="if_statement"];
  82 [label="IF"];
  81 -> 82;
  83 [label="logical_expression"];
  84 [label="logical_expression"];
  85 [label="single_expression"];
  86 [label="id"];
  87 [label="x"];
  86 -> 87;
  85 -> 86;
  84 -> 85;
  83 -> 84;
  88 [label="comparator"];
  89 [label="greater_equal"];
  90 [label=">="];
  89 -> 90;
  88 -> 89;
  83 -> 88;
  91 [label="logical_expression"];
  92 [label="single_expression"];
  93 [label="constant"];
  94 [label="10"];
  93 -> 94;
  92 -> 93;
  91 -> 92;
  83 -> 91;
  81 -> 83;
  95 [label=":"];
  81 -> 95;
  96 [label="statement"];
  97 [label="single_statement"];
  98 [label="pass_statement"];
  99 [label="PASS"];
  98 -> 99;
  97 -> 98;
  96 -> 97;
  100 [label=";"];
  96 -> 100;
  81 -> 96;
  101 [label="ELIF"];
  81 -> 101;
  102 [label="logical_expression"];
  103 [label="logical_expression"];
  104 [label="single_expression"];
  105 [label="id"];
  106 [label="x"];
  105 -> 106;
  104 -> 105;
  103 -> 104;
  102 -> 103;
  107 [label="comparator"];
  108 [label="equal"];
  109 [label="=="];
  108 -> 109;
  107 -> 108;
  102 -> 107;
  110 [label="logical_expression"];
  111 [label="single_expression"];
  112 [label="constant"];
  113 [label="11"];
  112 -> 113;
  111 -> 112;
  110 -> 111;
  102 -> 110;
  81 -> 102;
  114 [label=":"];
  81 -> 114;
  115 [label="statement"];
  116 [label="single_statement"];
  117 [label="assign_statement"];
  118 [label="id"];
  119 [label="x"];
  118 -> 119;
  117 -> 118;
  120 [label="assign_operator"];
  121 [label="assign"];
  122 [label="="];
  121 -> 122;
  120 -> 121;
  117 -> 120;
  123 [label="expression"];
  124 [label="single_expression"];
  125 [label="constant"];
  126 [label="1"];
  125 -> 126;
  124 -> 125;
  123 -> 124;
  117 -> 123;
  116 -> 117;
  115 -> 116;
  127 [label=";"];
  115 -> 127;
  81 -> 115;
  128 [label="ELSE"];
  81 -> 128;
  129 [label=":"];
  81 -> 129;
  130 [label="statement"];
  131 [label="single_statement"];
  132 [label="assign_statement"];
  133 [label="id"];
  134 [label="x"];
  133 -> 134;
  132 -> 133;
  135 [label="assign_operator"];
  136 [label="add_assign"];
  137 [label="+="];
  136 -> 137;
  135 -> 136;
  132 -> 135;
  138 [label="expression"];
  139 [label="single_expression"];
  140 [label="constant"];
  141 [label="2"];
  140 -> 141;
  139 -> 140;
  138 -> 139;
  132 -> 138;
  131 -> 132;
  130 -> 131;
  142 [label=";"];
  130 -> 142;
  81 -> 130;
  80 -> 81;
  79 -> 80;
  143 [label="END"];
  79 -> 143;
  1 -> 79;
  144 [label="statement"];
  145 [label="single_statement"];
  146 [label="single_declaration"];
  147 [label="variable_declaration"];
  148 [label="data_type"];
  149 [label="float"];
  150 [label="float"];
  149 -> 150;
  148 -> 149;
  147 -> 148;
  151 [label="id"];
  152 [label="y"];
  151 -> 152;
  147 -> 151;
  153 [label="assign"];
  154 [label="="];
  153 -> 154;
  147 -> 153;
  155 [label="expression"];
  156 [label="single_expression"];
  157 [label="constant"];
  158 [label="20.0"];
  157 -> 158;
  156 -> 157;
  155 -> 156;
  147 -> 155;
  146 -> 147;
  145 -> 146;
  144 -> 145;
  159 [label=";"];
  144 -> 159;
  1 -> 144;
  160 [label="statement"];
  161 [label="block_statement"];
  162 [label="loop_statement"];
  163 [label="while_statement"];
  164 [label="WHILE"];
  163 -> 164;
  165 [label="logical_expression"];
  166 [label="logical_expression"];
  167 [label="single_expression"];
  168 [label="id"];
  169 [label="y"];
  168 -> 169;
  167 -> 168;
  166 -> 167;
  165 -> 166;
  170 [label="comparator"];
  171 [label="greater_equal"];
  172 [label=">="];
  171 -> 172;
  170 -> 171;
  165 -> 170;
  173 [label="logical_expression"];
  174 [label="single_expression"];
  175 [label="constant"];
  176 [label="5.0"];
  175 -> 176;
  174 -> 175;
  173 -> 174;
  165 -> 173;
  163 -> 165;
  177 [label=":"];
  163 -> 177;
  178 [label="statement"];
  179 [label="single_statement"];
  180 [label="assign_statement"];
  181 [label="id"];
  182 [label="y"];
  181 -> 182;
  180 -> 181;
  183 [label="assign_operator"];
  184 [label="div_assign"];
  185 [label="/="];
  184 -> 185;
  183 -> 184;
  180 -> 183;
  186 [label="expression"];
  187 [label="single_expression"];
  188 [label="constant"];
  189 [label="2"];
  188 -> 189;
  187 -> 188;
  186 -> 187;
  180 -> 186;
  179 -> 180;
  178 -> 179;
  190 [label=";"];
  178 -> 190;
  163 -> 178;
  162 -> 163;
  161 -> 162;
  160 -> 161;
  191 [label="END"];
  160 -> 191;
  1 -> 160;
  192 [label="<EOF>"];
  1 -> 192;
}
